{
  "name": "interview-prep-agent",
  "nodes": [
    {
      "parameters": {
        "enableResponseOutput": true,
        "respondWith": "text",
        "responseBody": "={\n  \"success\": true,\n  \"title\": \"🎉 ניתוח קורות חיים הושלם בהצלחה!\",\n  \"analysis\": \"{{ $('Analyze resume with Gemini').first().$json.candidates[0].content.parts[0].text }}\",\n  \"downloadFile\": {\n    \"filename\": \"ניתוח_קורות_חיים_{{ $now.format('YYYY-MM-DD') }}.doc\",\n    \"content\": \"{{ $('Analyze resume with Gemini').first().$json.candidates[0].content.parts[0].text }}\",\n    \"instructions\": \"העתק את התוכן מהשדה 'content' והדבק במסמך Word חדש\"\n  },\n  \"viewUrl\": \"data:text/html;charset=utf-8,{{ encodeURIComponent('<!DOCTYPE html><html><head><meta charset=\\\"UTF-8\\\"><title>ניתוח קורות חיים</title><style>body{font-family:Arial;direction:rtl;margin:20px;line-height:1.6}h1,h2,h3{color:#2c5282}.download{background:#4CAF50;color:white;padding:10px 20px;border:none;border-radius:5px;cursor:pointer;margin:20px 0}</style></head><body><h1>ניתוח קורות חיים</h1><button class=\\\"download\\\" onclick=\\\"download()\\\">📥 הורד</button><div id=\\\"content\\\">' + $('Analyze resume with Gemini').first().$json.candidates[0].content.parts[0].text.replace(/\\n/g,'<br>') + '</div><script>function download(){const text=document.getElementById(\\\"content\\\").textContent;const blob=new Blob([text],{type:\\\"text/plain\\\"});const url=URL.createObjectURL(blob);const a=document.createElement(\\\"a\\\");a.href=url;a.download=\\\"ניתוח_קורות_חיים.txt\\\";a.click();}</script></body></html>') }}\",\n  \"timestamp\": \"{{ $now }}\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        1180,
        -20
      ],
      "id": "45c10734-2041-452e-9d21-78953fa3e8d0",
      "name": "Respond to client request",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "jsCode": "const bodyData = $json.body;\n\nif (!bodyData || !bodyData.resume) {\n  return [{\n    json: {\n      error: \"No resume found in body\",\n      availableInBody: bodyData ? Object.keys(bodyData) : \"No body data\",\n      fullStructure: $json\n    }\n  }];\n}\n\nconst resumeBase64 = bodyData.resume;\nconst resumeBuffer = Buffer.from(resumeBase64, 'base64');\n\nreturn [{\n  json: {\n    message: \"Resume processed successfully\",\n    resume: resumeBase64,\n    resumeMimeType: bodyData.resumeMimeType,\n    resumeFilename: bodyData.resumeFilename,\n    jobLink: bodyData.jobLink,\n    companyLink: bodyData.companyLink,\n    linkedinProfile: bodyData.linkedinProfile\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -380,
        -20
      ],
      "id": "de9054e5-b432-41c9-b51f-e67bf2a3fae9",
      "name": "Prepare resume binary"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "interview-prep",
        "responseMode": "responseNode",
        "options": {
          "binaryPropertyName": "resume"
        }
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -600,
        -20
      ],
      "id": "29bf0d9c-7353-47d6-953e-e4c3828dc273",
      "name": "Get client request",
      "webhookId": "1aa92215-ab85-40d5-b53e-335185b098c2"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://resume-api:5001/extract_resume",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "=resume",
              "value": "={{ $json.resume }}"
            },
            {
              "name": "resumeMimeType",
              "value": "={{ $json.resumeMimeType }}"
            },
            {
              "name": "resumeFileName",
              "value": "={{ $json.resumeFileName }}"
            },
            {
              "name": "jobLink",
              "value": "={{ $json.jobLink }}"
            },
            {
              "name": "companyLink",
              "value": "={{ $json.companyLink }}"
            },
            {
              "name": "linkedinProfile",
              "value": "={{ $json.linkedinProfile }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -160,
        -20
      ],
      "id": "7b0ef5b1-f565-4833-a4b4-65a28dbe8df8",
      "name": "Extract resume text",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent?key=AIzaSyBWvpvXE76tHavIA87zqHsRVrsImD9N-Is",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "googlePalmApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        480,
        -20
      ],
      "id": "fc65cce8-1d9d-4b54-b4ea-deca71c3ee71",
      "name": "Analyze resume with Gemini",
      "credentials": {
        "httpBearerAuth": {
          "id": "NavZqHrY5hmtxwv1",
          "name": "Bearer Auth account"
        },
        "googlePalmApi": {
          "id": "2x2J6Tmf8bNUJhCn",
          "name": "Google Gemini(PaLM) Api account"
        },
        "googleApi": {
          "id": "TvBWFIJM08LRtuYK",
          "name": "Google Service Account account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const inputData = $input.first().json;\n\nconst resumeText = inputData.resumeText;\nconst jobLink = inputData.jobLink;\nconst companyLink = inputData.companyLink;\nconst linkedinProfile = inputData.linkedinProfile;\n\nconst prompt = `\nאתה עוזר קריירה חכם. קיבלת קובץ קורות חיים, לינק למשרה, ולינק לחברה.\n\nעליך:\n1. לנתח בקצרה את קורות החיים.\n2. לבדוק האם יש התאמה בין קורות החיים לדרישות המשרה בלינק הבא: ${jobLink}\n3. להציע שיפורים, הדגשות או התאמות שניתן לבצע בקורות החיים כדי לשפר את ההתאמה למשרה.\n4. לנתח את החברה לפי הלינק הבא: ${companyLink} — הצג מה כדאי לדעת על החברה לפני ראיון, ו**צרף הסבר קצר על כל נקודה שכתבת**, כדי שהמועמד/ת יבינו במה מדובר.\n5. צור סט של 3–5 שאלות טכניות שמתאימות לדרישות התפקיד, ו**לצד כל שאלה צור גם תשובה קצרה או כיוון למענה טוב**.\n6. צור 2–3 שאלות חכמות שהמועמד/ת יכולים לשאול את המראיין.\n7. כתוב 3–5 משפטי מפתח שיעזרו להרשים את המראיין — כמו משפטי פתיחה, סיכום, או תשובות חזקות לשאלות כלליות (למשל: \"למה את/ה מתאים לתפקיד\").\n\nהקפד לנסח הכל **בעברית תקנית**, ברמה גבוהה, ברור, מקצועי וישיר.\n\nקורות החיים:\n${resumeText}\n\nפרופיל לינקדאין של המועמד:\n${linkedinProfile}\n`;\n\nreturn [{ json: { message: prompt } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        60,
        -20
      ],
      "id": "786bc07f-8e29-4820-bbaa-d51ac2960199",
      "name": "Prepare Gemini Prompt"
    },
    {
      "parameters": {
        "fromEmail": "=hadas414@gmail.com",
        "toEmail": "={{ $('Get client request').first().json.body.email }}",
        "subject": "=interviw prep - {{ $now.format('DD/MM/YYYY') }}",
        "emailFormat": "text",
        "text": "=🎉 ניתוח קורות החיים הושלם בהצלחה!\n\nשלום,\n\nהניתוח המקיף של קורות החיים שלך מוכן!\n\n📋 מה כלול במסמך:\n✅ ניתוח מפורט של קורות החיים\n✅ המלצות לשיפור והדגשה\n✅ כ- 5 שאלות ראיון טכניות עם תשובות מלאות\n✅ אסטרטגיות חיפוש עבודה\n✅ ניתוח התאמה למשרה (אם סופק לינק)\n\n📎 הקובץ מצורף למייל זה בפורמט Word\n\nבהצלחה בחיפוש העבודה הבא! 🚀\n\n---\n🤖 מסמך זה נוצר אוטומטית באמצעות Gemini AI\n📅 תאריך יצירה: {{ $now.format('DD/MM/YYYY HH:mm') }}",
        "options": {
          "attachments": "=data"
        }
      },
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2.1,
      "position": [
        1020,
        -20
      ],
      "id": "5bbff793-ab99-4813-bfb5-6aedb2b091fc",
      "name": "Send Email",
      "webhookId": "c542a950-f1ba-4cf4-b7f3-5fb4e9f58923",
      "credentials": {
        "smtp": {
          "id": "bhbeCbVzAhdUEKCB",
          "name": "SMTP account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// קבלת התשובה מ-Gemini\nconst geminiResponse = $json.candidates[0].content.parts[0].text;\n\n// ניקוי הטקסט מתווים מיוחדים להכנה ל-Word\nconst cleanText = geminiResponse\n  .replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>') // המרה ל-HTML bold\n  .replace(/\\*(.*?)\\*/g, '<em>$1</em>')             // המרה ל-HTML italic\n  .replace(/###\\s*(.*?)$/gm, '<h3>$1</h3>')        // המרה ל-headers\n  .replace(/##\\s*(.*?)$/gm, '<h2>$1</h2>')         \n  .replace(/#\\s*(.*?)$/gm, '<h1>$1</h1>')          \n  .replace(/---/g, '<hr>');                        // קו מפריד\n\n// יצירת מבנה Word HTML\nconst wordContent = `<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Interview Prep - Gemini AI</title>\n    <style>\n        body {\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n            line-height: 1.6;\n            margin: 40px;\n            direction: rtl;\n            text-align: right;\n        }\n        h1 { color: #2c5282; border-bottom: 3px solid #2c5282; padding-bottom: 10px; }\n        h2 { color: #3182ce; margin-top: 30px; }\n        h3 { color: #4299e1; }\n        .section {\n            margin-bottom: 25px;\n            padding: 15px;\n            background-color: #f7fafc;\n            border-right: 4px solid #3182ce;\n        }\n        .footer {\n            margin-top: 50px;\n            text-align: center;\n            color: #718096;\n            font-size: 0.9em;\n        }\n    </style>\n</head>\n<body>\n    <h1>📋 Interview Prep - Gemini AI</h1>\n    <div class=\"section\">\n        <h2>📅 תאריך הניתוח: ${new Date().toLocaleDateString('he-IL')}</h2>\n    </div>\n    \n    <div class=\"section\">\n        ${cleanText}\n    </div>\n    \n    <div class=\"footer\">\n        <p>מסמך זה נוצר אוטומטית על ידי מערכת ניתוח קורות חיים מבוססת Gemini AI</p>\n    </div>\n</body>\n</html>`;\n\n// המרה ל-base64\nconst base64Content = Buffer.from(wordContent, 'utf8').toString('base64');\nconst filename = `Interview_Prep_${new Date().toISOString().split('T')[0]}.html`;\n\nreturn [{\n    json: {\n        success: true,\n        filename: filename,\n        originalResponse: geminiResponse\n    },\n    binary: {\n        attachment: {\n            data: base64Content,\n            mimeType: 'text/html',\n            fileName: filename\n        }\n    }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        680,
        -20
      ],
      "id": "752fa886-80bc-4c5d-91e7-0b50daa96be3",
      "name": "Generate Word Document - Attachment"
    },
    {
      "parameters": {
        "jsCode": "const prompt = $json.message;\n\nreturn [\n  {\n    json: {\n      contents: [\n        {\n          parts: [\n            {\n              text: prompt\n            }\n          ]\n        }\n      ]\n    }\n  }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        260,
        -20
      ],
      "id": "1d5d3a29-9907-47c1-bb7e-16dc5d46350b",
      "name": "Prepare Gemini JSON"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://resume-api:5001/generate_docx",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "=text",
              "value": "={{ $json.originalResponse }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        860,
        -20
      ],
      "id": "b809d844-2c8f-4b00-976a-cb6f9e0fe97e",
      "name": "HTTP Request"
    }
  ],
  "pinData": {},
  "connections": {
    "Respond to client request": {
      "main": [
        [],
        []
      ]
    },
    "Prepare resume binary": {
      "main": [
        [
          {
            "node": "Extract resume text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get client request": {
      "main": [
        [
          {
            "node": "Prepare resume binary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract resume text": {
      "main": [
        [
          {
            "node": "Prepare Gemini Prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analyze resume with Gemini": {
      "main": [
        [
          {
            "node": "Generate Word Document - Attachment",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Gemini Prompt": {
      "main": [
        [
          {
            "node": "Prepare Gemini JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Email": {
      "main": [
        [
          {
            "node": "Respond to client request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Word Document - Attachment": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Gemini JSON": {
      "main": [
        [
          {
            "node": "Analyze resume with Gemini",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Send Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "8c19c83a-10e9-43aa-bbbc-9df06928e4b3",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "1b28df76c9156387895ab85dc43e5301f1062ddde07d80b1ca5c6a8860c59e07"
  },
  "id": "qaKmP5KxOgQViDul",
  "tags": []
}